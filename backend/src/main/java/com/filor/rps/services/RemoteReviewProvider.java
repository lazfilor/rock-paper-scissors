package com.filor.rps.services;

import com.filor.rps.model.Move;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * Provides reviews that were dynamically generated by open-ai
 */
@Slf4j
@RequiredArgsConstructor
public class RemoteReviewProvider extends ReviewProvider {

    public static final String OPENAI_MODEL = "text-davinci-003";

    public static final int OPEN_AI_MAX_TOKENS = 75;

    public static final String OPENAI_ROAST_PROMPT = "Roast a player that lost a game of rock-paper-scissors using %s against %s in one sentence.";

    public static final String OPENAI_CONGRATS_PROMPT = "Jokingly congratulate a player that won a game of rock-paper-scissors using %s against %s in one sentence.";

    private final WebClient webClient;

    @Override
    protected Mono<String> getRoast(Move userMove, Move serverMove) {
        return queryOpenApi(formatOpenAiPrompt(OPENAI_ROAST_PROMPT, userMove, serverMove))
                .flatMap(this::getTextFromResponse);

    }

    @Override
    protected Mono<String> getCongratulations(Move userMove, Move serverMove) {
        return queryOpenApi(formatOpenAiPrompt(OPENAI_CONGRATS_PROMPT, userMove, serverMove))
                .flatMap(this::getTextFromResponse);
    }

    Mono<OpenApiResponse> queryOpenApi(String prompt) {
        return webClient.post()
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(createOpenAiRequest(prompt))
                .exchangeToMono(response -> {
                    if (response.statusCode().equals(HttpStatus.OK)) {
                        return response.bodyToMono(OpenApiResponse.class);
                    } else {
                        log.error("Unable to query OpenApi, received status {}", response.statusCode());
                        return response.createError();
                    }
                });
    }

    Mono<String> getTextFromResponse(OpenApiResponse response) {
        String responseText;

        try {
            responseText = response.getChoices().get(0).getText();

            if (responseText == null || responseText.isEmpty()) {
                throw new IllegalStateException("Empty response text");
            }
        } catch (Exception e) {
            log.error("OpenAPI response did not contain response text");
            return Mono.error(e);
        }
        return Mono.just(responseText);
    }
    String formatOpenAiPrompt(String prompt, Move userMove, Move serverMove) {
        return String.format(prompt, userMove.toString().toLowerCase(Locale.ROOT), serverMove.toString().toLowerCase(Locale.ROOT));
    }

    @Data
    private static class OpenApiResponse {
        List<OpenApiCompletionContent> choices;
    }

    @Data
    private static class OpenApiCompletionContent {
        private String text;
    }

    private static Map<String, Object> createOpenAiRequest(String prompt) {
        return Map.of(
                "model", OPENAI_MODEL,
                "prompt", prompt,
                "max_tokens", OPEN_AI_MAX_TOKENS
        );
    }
}
